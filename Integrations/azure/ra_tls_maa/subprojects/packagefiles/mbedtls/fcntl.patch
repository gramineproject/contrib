# Workaround for missing `fcntl64` symbol.
# When built on a newer distro (e.g. Ubuntu 20.04) which has glibc in version >= 2.28, Gramine
# failed to work on distros with older glibc (e.g. Ubuntu 18.04 - glibc 2.27). This is due to symbol
# incompatibility, namely `fcntl` - since glibc 2.28 there is a newer version `fcntl64`,
# which is not present on older versions. As a workaround we just changed each usage of `fcntl` to
# a direct syscall - these calls just check and/or change `O_NONBLOCK` flag.
# Note that building with this patch might throw a warning about missing `syscall` declaration.
# We did not bother fixing this, because it will be always present and this is a hack anyway.
# TODO: remove this patch after we drop Ubuntu 18.04 support

diff --git a/library/net_sockets.c b/library/net_sockets.c
index 17a9e4a5760bb19270af584f9acc861c2f9ab4c7..b02b4c99f15c4881876bf8a061748056f1161b86 100644
--- a/library/net_sockets.c
+++ b/library/net_sockets.c
@@ -92,6 +92,7 @@ static int wsa_init_done = 0;
 #include <fcntl.h>
 #include <netdb.h>
 #include <errno.h>
+#include <sys/syscall.h>
 
 #define IS_EINTR( ret ) ( ( ret ) == EINTR )
 
@@ -313,7 +314,7 @@ static int net_would_block( const mbedtls_net_context *ctx )
     /*
      * Never return 'WOULD BLOCK' on a blocking socket
      */
-    if( ( fcntl( ctx->fd, F_GETFL ) & O_NONBLOCK ) != O_NONBLOCK )
+    if( ( syscall( SYS_fcntl, ctx->fd, F_GETFL ) & O_NONBLOCK ) != O_NONBLOCK )
     {
         errno = err;
         return( 0 );
@@ -462,7 +463,7 @@ int mbedtls_net_set_block( mbedtls_net_context *ctx )
     u_long n = 0;
     return( ioctlsocket( ctx->fd, FIONBIO, &n ) );
 #else
-    return( fcntl( ctx->fd, F_SETFL, fcntl( ctx->fd, F_GETFL ) & ~O_NONBLOCK ) );
+    return( syscall( SYS_fcntl, ctx->fd, F_SETFL, syscall(SYS_fcntl, ctx->fd, F_GETFL ) & ~O_NONBLOCK ) );
 #endif
 }
 
@@ -473,7 +474,7 @@ int mbedtls_net_set_nonblock( mbedtls_net_context *ctx )
     u_long n = 1;
     return( ioctlsocket( ctx->fd, FIONBIO, &n ) );
 #else
-    return( fcntl( ctx->fd, F_SETFL, fcntl( ctx->fd, F_GETFL ) | O_NONBLOCK ) );
+    return( syscall( SYS_fcntl, ctx->fd, F_SETFL, syscall( SYS_fcntl, ctx->fd, F_GETFL ) | O_NONBLOCK ) );
 #endif
 }
 
